2016.7.28

今天又重新回顾了一下vuejs官网上的1-6节，感觉印象最为深刻的莫过于绑定，在文档中渲染文本，和在属性中渲染数据，也可以采取v-bind等指令直接绑定，而无需用｛｛｝｝来绑定，当然也可以用｛｛｛｝｝｝来将绑定的数据当作html解析

2016.7.29

绑定样式最好不要既用｛｛｝｝，又用v-bind，否则很可能报错，
一般绑定样式会支持对象和数组
比如 v-bind:class="[class1,class2"] class列表
获取 v-bind:class="{classname1:is1,classname2:is2}" 条件class
如果都支持呢，可以用三元表达式 v-bind:class="[classA,isB?classB:""]"这么写还是有些麻烦，所以vue支持这种写法 v-bind:class='[classA,{classBname:isB}]'

v-bind:style实际上是一个对象，比如
v-bind:style="{color:activeColor,fontSize:fontSize+'px'}"

v-show和v-if的区别在于一个始终渲染存在dom中，另一个是只有显示的时候才会渲染。

用track-by来增强组件的复用

vue不能检测到下列数组的变化
vm.items[0] = {}失效
可以使用$set内置方法来代替
vm.items.$set(0,childMsg:"changed");
vm.item.length = 0失效
vm.items = {}来代替

v-for取数组可以有（index，item） in items
v-for取数组可以由（key,value） in item

v-model中
select、checkbox、radio中的v-model是和已经选择的值所绑定的，可以用v-bind:true-value和v-bind:false-value来设置选择和没选择时候的值

debounce可以设定延迟

过渡和动画
js中的过渡主要用 transition来实现 ，从A到B的某一个状态
而动画，主要是用keyframe实现，并且可以有多个变化
vue.js中的过渡效果主要是绑定transition属性来完成，有进入、过渡、离开三个过
程 transition = "expand" 则在样式中写上 .expand-transition,.expand-enter,.expand-leave的样式
并且可以动态绑定不同的过渡样式。。除此之外还可以通过Vue.transition('expand',{})来绑定不同得到钩子

daneden.github.io/animate.css

2016.7.30

今天在看vuejs里的组件部分，其中提到了is这个属性，这个属性在没有语法错误的前提下可以将当前元素替换成属性里指定的模板
模板要首先在扩展器里定义，并在组件部分注册

var MyComponent = Vue.extend({
  template:'',
  data:function(){

  }
})
的形式可以返回一个对象构造器，以此可以得到一个实例对象
var myComponentInstance = new MyComponent()
该实例对象可以通过内置方法$mount挂在到某个dom节点上
如myComponentInstance.$mount("#app");

有了组件构造器，可以通过Vue.component(tag,MyComponent);注册组件
然后tag作为标签的挂载点，挂载在html当中，并替换成模板-
可以在组件中选择是replace还是insert，通过replace的布尔值来设置

2016.7.31

关于vue.js中的template标签
<template id=""></template> 其实是和 <script type="text/x-tempate" id=""></script>是等价的，这个直接在vm中表明id即可

2016.8.2

关于props,由于子组件的数据的作用域都是在data中，而不应涉及父组件，那么当需要父组件的数据时，可以通过props来将父组件的数据传给
子组件,值得注意时重名的data中的数据会被忽略。props默认是单向绑定，可以使用.sync和.once来强制双向绑定和单次绑定

2016.8.6

可以直接在vm上绑定$on,然后用$emi`t来触发，也可以直接讲事件写在vm的events里，然后用$dispatch或者$emit或者$broadcast去触发。值得一提的是，$dispatch沿着父组件树传播直到触发事件，$broadcast沿着不同路径的子组件分叉传播直到触发事件。

2016.8.8

在组件切换或者载入的时候，可以加入钩子，比如active等钩子

transition-mode特性用于指定俩个动态组件之间如何过度。在默认情况下，进入与离开平滑的过渡。这个特性可以指定另外俩个模式，分别是in-out和out-in模式。分别是先入后出和先出后入。
